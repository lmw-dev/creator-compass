---
description: 
globs: 
alwaysApply: true
---
---
description: "任务完成的标准工作流程规范"
globs: ["**/*"]
alwaysApply: true
---
# 任务完成流程规范 - Cursor AI 执行指导

## 🤖 Cursor AI 执行原则
**重要**: 作为 Cursor AI，你必须严格按照以下流程执行任务，不得跳过任何关键步骤。

### 🔍 AI与人工分工界限
**关键原则**: 必须明确区分AI可以完成的部分和需要人工验收的部分，避免错误地将代码实现完成等同于功能验收完成。

#### AI 负责完成的部分：
- ✅ 代码实现（组件、API、数据库集成等）
- ✅ 单元测试编写和执行
- ✅ 构建验证（TypeScript编译、依赖检查等）
- ✅ 代码质量检查（lint、类型检查等）
- ✅ 文档更新和Linear评论
- ✅ Git提交和版本控制

#### 人工验收部分（AI不能替代）：
- ⚠️ 端到端浏览器测试（真实用户交互）
- ⚠️ 跨设备响应式测试
- ⚠️ 用户体验验证
- ⚠️ 跨浏览器兼容性测试
- ⚠️ 性能在真实环境中的表现
- ⚠️ 最终产品质量验收

### 自动执行检查清单
每个任务完成时，必须自动执行以下检查：
1. ✅ **代码实现检查**: 是否完成了所有功能代码实现
2. ✅ **单元测试检查**: 是否编写并通过了所有单元测试
3. ✅ **构建验证检查**: 是否运行了构建和测试验证
4. ✅ **文档更新检查**: 是否更新了相关文档
5. ✅ **Linear 评论检查**: 是否添加了详细的完成评论（明确标出需要人工验收的部分）
6. ✅ **Git 提交检查**: 是否使用规范格式提交了代码

## 前期准备阶段
### 1. 任务理解 (必须执行)
- 使用 `mcp_linear_get_ticket` 获取任务详情
- 分析验收标准和技术要求
- 识别依赖关系和潜在风险
- 制定实现计划

### 2. 环境准备 (必须执行)
- 检查当前工作目录: `pwd`
- 验证依赖安装: `npm list`
- 检查构建状态: `npm run build`
- 准备测试环境

## 开发阶段
### 1. 代码实现 (核心阶段)
- 遵循 TypeScript 编码标准
- 添加详细的注释和日志
- 实现错误处理和边界情况
- 进行代码自审

### 2. 测试用例 (必须执行)
- 编写单元测试 (目标覆盖率80%+)
- 运行测试: `npm test`
- 验证测试覆盖率
- 测试边界条件

### 3. 质量验证 (必须执行)
- 运行 lint 检查: `npm run lint`
- 类型检查: `tsc --noEmit`
- 性能验证
- 内存使用检查

## 构建验证 (必须执行)
### 1. 构建检查
```bash
npm run build
```
- 验证构建成功
- 检查产物完整性
- 确认无警告错误

### 2. 部署验证
```bash
npm run deploy
```
- 部署到测试环境
- 验证功能正常
- 检查控制台错误

## 📝 文档更新 (必须执行 - 关键步骤)
### 1. 开发文档更新
**必须更新**: `docs/development-record.md`
- 在对应的任务条目中标记 ✅ **已完成**
- 添加具体的实现细节和技术亮点
- 更新开发日志部分，记录完成时间和成果
- 记录重要的技术决策

### 2. 技术文档创建
- 为复杂功能创建专门的技术文档
- 添加使用示例和测试指南
- 记录配置说明和注意事项

## 📋 Linear 任务管理 (必须执行 - 关键步骤)
### 1. 获取任务信息
```bash
# 使用 mcp_linear_get_ticket 获取任务详情
```

### 2. 添加完成评论 (必须执行)
使用 `mcp_linear_add_comment` 添加详细评论，包含：
- ✅ 任务完成总结
- 🎯 核心成就和技术亮点
- 🔧 关键技术实现
- 📊 性能数据和验证结果
- 🧪 测试覆盖情况
- 📝 可用工具和命令

### 3. 评论模板 (必须使用)
```markdown
## ✅ 任务完成总结

### 🎯 实现成果
已成功实现[功能描述]，AI完成部分满足技术实现标准：

**1. 核心功能实现**
- ✅ [具体功能1]
- ✅ [具体功能2]
- ✅ [具体功能3]

**2. 性能优化**
- ✅ [性能指标1]
- ✅ [性能指标2]

**3. 技术架构**
- ✅ [架构改进1]
- ✅ [架构改进2]

### 🔧 关键技术改进
1. **[技术点1]**: [详细说明]
2. **[技术点2]**: [详细说明]

### 📊 性能提升
- [指标1]: [具体数据]
- [指标2]: [具体数据]

### 🧪 测试验证
- ✅ [测试类型1]: [具体数据]
- ✅ [测试类型2]: [具体数据]

### 🔄 后续需要人工验收的内容
**⚠️ 需要浏览器端到端测试验收**：
1. 启动开发环境: `npm run dev`
2. 完成登录流程验证
3. 功能交互验证: 
   - [具体功能点1]
   - [具体功能点2]
   - [具体功能点3]
4. 响应式设计验证: 测试移动端和桌面端显示效果
5. 跨浏览器兼容性测试

**状态：代码实现已完成，等待端到端浏览器测试验收**
```

## 🔄 版本控制 (必须执行 - 关键步骤)
### 1. Git 提交 (必须执行)
```bash
git add .
git commit -m "feat(任务类型): 简要描述 - 详细说明和技术亮点 - Closes 任务ID"
git push origin develop
```

### 2. 提交信息格式 (必须遵循)
```
feat(rag): 实现多阶段RAG检索算法和智能分块策略 - 优化检索性能从10+分钟至秒级响应，支持文件自动监听和增量更新 - Closes TOM-104, TOM-105
```

## 🎯 任务完成最终检查 (必须执行)
### AI 自动化检查清单
作为 Cursor AI，在标记任务为"代码实现完成"前必须执行以下检查：

1. **📋 Linear 任务状态**
   - [ ] 使用 `mcp_linear_get_ticket` 确认任务详情
   - [ ] 使用 `mcp_linear_add_comment` 添加完成评论（必须明确标出需要人工验收的部分）
   - [ ] 确认所有技术实现标准已满足

2. **📝 文档更新状态**
   - [ ] 更新相关文档中的任务状态（标记为"代码实现完成，等待端到端验收"）
   - [ ] 添加开发日志记录
   - [ ] 创建必要的技术文档

3. **🔧 代码质量状态**
   - [ ] 运行 `npm test` 确保单元测试通过
   - [ ] 运行 `npm run build` 确保构建成功
   - [ ] 运行 `npm run lint` 确保代码质量
   - [ ] 运行 `tsc --noEmit` 确保类型检查通过

4. **📦 版本控制状态**
   - [ ] 使用规范格式提交代码
   - [ ] 推送到远程仓库
   - [ ] 确认提交信息包含任务ID

5. **🎉 最终验证**
   - [ ] 使用 `mcp_interactive-feedback-mcp_interactive_feedback` 获取反馈
   - [ ] 根据反馈完善遗漏的步骤
   - [ ] 确认AI负责的部分完全完成

### 人工验收检查清单
以下检查必须由人工在真实环境中完成，AI不能替代：

1. **🌐 端到端浏览器测试**
   - [ ] 启动开发环境并访问功能页面
   - [ ] 完成完整的用户交互流程测试
   - [ ] 验证所有用户界面元素正常工作
   - [ ] 确认错误处理和边界情况表现

2. **📱 跨设备兼容性测试**
   - [ ] 移动端响应式设计验证
   - [ ] 桌面端显示效果验证
   - [ ] 触摸和鼠标交互验证

3. **🔄 跨浏览器兼容性测试**
   - [ ] Chrome/Safari/Firefox 兼容性
   - [ ] 性能在真实环境中的表现
   - [ ] 控制台错误检查

4. **✅ 最终产品质量验收**
   - [ ] 用户体验是否符合预期
   - [ ] 功能是否完全满足验收标准
   - [ ] 是否存在影响用户使用的问题

## 🚨 重要提醒
**作为 Cursor AI，你必须：**
1. **明确分工界限** - 永远不要将代码实现完成等同于功能验收完成
2. **诚实标记状态** - 只能标记为"代码实现完成"，不能标记为"任务完成"
3. **不得跳过文档更新步骤** - 每个任务都必须更新相关文档
4. **不得跳过 Linear 评论步骤** - 每个任务都必须添加详细的 Linear 评论，并明确标出需要人工验收的部分
5. **不得跳过 Git 提交步骤** - 每个任务都必须进行规范的 Git 提交
6. **必须使用交互式反馈** - 在任务完成时使用 `mcp_interactive-feedback-mcp_interactive_feedback` 获取反馈
7. **必须处理反馈** - 根据反馈完善遗漏的步骤，不得忽略
8. **质量第一** - 不得为了完成任务而完成任务，目标是交付高质量的产品

## 🎯 质量保障原则
- **真实用户场景测试不可替代** - 任何功能都必须经过真实浏览器环境的端到端测试
- **用户体验优先** - 代码实现只是第一步，用户体验验收才是最终目标
- **持续改进** - 基于每次任务执行经验持续优化流程和质量标准

## 🔄 持续改进
- 根据任务执行经验持续优化此流程
- 记录常见问题和解决方案
- 更新最佳实践和工具使用指南
- 强化人机协作的质量保障机制
