# Rule: Guide for Writing Development Documents

## Description
This rule provides a technical design template to guide the AI in creating comprehensive development documents that serve as the foundation for implementation. The template focuses on technical architecture design, implementation planning, and providing the technical basis for subsequent Prompt documents.

## AI Action
When prompted to create a development document for a task, your primary action is to **create a new Markdown file**.

- **File Location**: The new file **must** be saved in the `/docs/development/` directory at the monorepo root.
- **File Naming**: The filename **must** follow the format: `[Task-ID]-dev-[task-title-in-kebab-case].md`.
  - **Example**: `TOM-199-dev-user-authentication-system.md`

The content of this new file must follow the template structure below.

---

## Template to Generate

# [任务ID]:dev:[任务标题]

**模块**: [从Linear Issue的标签或标题中提取]
**负责人**: Cursor AI
**完成日期**: [YYYY-MM-DD]
**状态**: 🎯 设计中 / ✅ 设计完成 / 🔄 实现中 / ✅ 已完成

---

## 🎯 设计概述 (Design Overview)

**设计目标**: [清晰描述本次技术设计要解决的核心问题]
**技术范围**: [明确技术实现的边界和范围]
**设计原则**: [指导本次设计的核心原则]

### 核心设计决策
1. **[决策1]**: [技术选择和理由]
2. **[决策2]**: [架构选择和理由]
3. **[决策3]**: [实现方式和理由]

### 设计输出
- **技术方案**: 完整的技术实现路径
- **架构设计**: 系统架构和组件关系
- **实现计划**: 具体的开发步骤和里程碑
- **风险评估**: 潜在风险和应对策略

---

## 1. 任务目标与背景

**Why**: [清晰阐述任务的业务价值和用户价值]

**User Story**: [具体的用户故事，描述用户需求场景]

**Business Impact**: [业务影响分析，包括：]
- [具体业务价值1]
- [具体业务价值2]
- [预期的业务指标提升]

---

## 2. 主要实现内容

### 2.1 当前实现状态分析

**✅ 已完成部分**：
- [具体完成的功能或组件]
- [已实现的技术特性]

**🔶 部分完成**：
- [部分完成的功能描述]

**❌ 待实现功能**：
- [待实现的核心功能]
- [需要完成的技术任务]

### 2.2 技术架构决策

**当前架构**: [当前采用的架构模式]
- ✅ 优点: [架构优势]
- ⚠️ 缺点: [潜在问题]

**推荐重构方案**（如适用）：
```
[文件结构或架构图]
```

### 2.3 核心逻辑/服务实现

**优先级1 - 必须实现**：
- [核心功能1]
- [核心功能2]

**优先级2 - 增强体验**：
- [体验优化功能]
- [性能优化项]

### 2.4 API端点实现

**注**: [API实现的说明或依赖关系]

- 预留接口设计：
  - `POST /api/...`: [接口功能描述]
  - `GET /api/...`: [接口功能描述]

---

## 3. 技术要求

### 3.1 技术栈

**前端框架**:
- ✅ [框架名称] - [使用状态和说明]
- ✅ [技术栈2] - [具体应用场景]

**后端技术**:
- ✅ [后端框架] - [实现状态]
- ✅ [数据库技术] - [使用场景]

**其他技术**:
- ✅ [认证系统] - [集成情况]
- ✅ [状态管理] - [实现方案]

### 3.2 架构设计

**当前架构模式**:
```
[架构图或文件结构]
```

**组件化重构建议**（如适用）:
```
[重构后的架构设计]
```

### 3.3 关键实现要求

**核心功能**:
- [功能要求1]
- [功能要求2]

**性能要求**:
- [性能指标1]
- [性能指标2]

**质量要求**:
- [质量标准1]
- [质量标准2]

### 3.4 质量标准

**代码质量**:
- TypeScript/Python 严格模式
- 代码规范和可维护性要求

**用户体验**:
- 响应时间要求
- 错误处理标准

**测试覆盖**:
- 单元测试覆盖率目标
- 集成测试要求

---

## 4. 单元测试与验收方法

### 4.1 单元测试策略 (AI负责实现)

**🤖 AI自动执行任务**:
- [ ] 编写核心业务逻辑的单元测试
- [ ] 测试`[核心函数]`的边界条件和错误处理
- [ ] 测试`[关键组件]`在不同状态下的行为
- [ ] 测试`[API接口]`的输入输出验证
- [ ] 确保测试覆盖率达到 ≥ 80%
- [ ] 所有测试必须100%通过

**📊 测试覆盖率要求**:
- 核心业务逻辑: ≥ 85%
- 组件渲染和交互: ≥ 80%
- 工具函数和服务: ≥ 90%

### 4.2 集成测试设计 (AI负责实现)

**🤖 AI自动执行任务**:
- [ ] 编写页面级集成测试
- [ ] 测试组件间的数据传递和状态管理
- [ ] 测试用户完整操作流程
- [ ] Mock外部依赖和API调用
- [ ] 验证错误处理和边界情况

### 4.3 端到端功能验收 (人类负责确认)

**👨‍💼 人类验收责任**:

**✅ 业务功能验收**:
- [ ] [具体业务功能1] - 符合产品需求
- [ ] [具体业务功能2] - 满足用户期望
- [ ] [具体业务功能3] - 数据完整性验证

**✅ 用户体验验收**:
- [ ] [用户操作流程1] - 符合设计稿
- [ ] [用户操作流程2] - 交互体验良好
- [ ] [响应性能] - 满足性能标准

**✅ 安全性验收**:
- [ ] [权限控制] - 访问权限正确
- [ ] [数据验证] - 输入验证完整
- [ ] [错误处理] - 用户友好的错误提示

### 4.4 依赖功能验收 (分工合作)

**🤖 AI技术验证**:
- [ ] [依赖服务1] - API接口调用正常
- [ ] [依赖服务2] - 数据模型兼容性
- [ ] [第三方库] - 版本兼容和功能正确

**👨‍💼 人类业务验证**:
- [ ] [业务流程] - 与其他模块集成正确
- [ ] [数据一致性] - 跨系统数据同步
- [ ] [用户权限] - 角色权限设置合理

---

## 5. 主要代码文件与类型说明

### 5.1 核心文件结构

```
[项目结构]
├── [文件1]                    # [文件说明]
├── [文件2]                    # [文件说明]
└── [目录]/
    ├── [子文件1]              # [子文件说明]
    └── [子文件2]              # [子文件说明]
```

### 5.2 核心类型定义

```typescript
// [类型分类1]
type [TypeName1] = {
  [属性1]: [类型];
  [属性2]: [类型];
  status: 'pending' | 'success' | 'error';
};

// [类型分类2]
type [TypeName2] = {
  [属性]: [类型];
  type: '[枚举值1]' | '[枚举值2]';
};

// [业务逻辑类型]
type [BusinessType] = 
  | { type: '[动作1]'; payload: [PayloadType] }
  | { type: '[动作2]'; payload: [PayloadType] };
```

### 5.3 组件 Props 接口

```typescript
// [组件1] Props
interface [Component1Props] {
  [必需属性]: [类型];
  [可选属性]?: [类型];
  [回调函数]: ([参数类型]) => void;
  disabled?: boolean;
}

// [组件2] Props
interface [Component2Props] {
  [属性1]: [类型];
  [属性2]: [类型];
}
```

### 5.4 开发计划

#### 5.4.1 时间安排

**当前状态** ([日期]):
- ✅ **阶段1**: [阶段描述] (已完成)
- ✅ **阶段2**: [阶段描述] (已完成)
- 🔶 **阶段3**: [阶段描述] (进行中)

**剩余任务规划（[当前任务ID]范围）**:

**优先级1 - [类别]** (预计时间):
- [具体任务1]
- [具体任务2]

**优先级2 - [类别]** (预计时间):
- [具体任务1]
- [具体任务2]

**📋 [依赖任务ID]依赖项**:
- [依赖项1]
- [依赖项2]

#### 5.4.2 技术里程碑

**✅ 已完成里程碑**:
- [x] [里程碑1]
- [x] [里程碑2]

**🔶 当前里程碑**:
- [ ] [当前正在进行的里程碑]

**📅 后续里程碑**:
- [ ] [后续里程碑1]
- [ ] [后续里程碑2]

---

## 6. 后续优化建议

### 6.1 性能优化

**[优化类别1]**: [具体优化建议]
**[优化类别2]**: [具体优化建议]

### 6.2 用户体验优化

**[UX优化1]**: [具体建议]
**[UX优化2]**: [具体建议]

### 6.3 数据分析集成

**[分析类别1]**: [具体建议]
**[分析类别2]**: [具体建议]

### 6.4 [其他优化类别]

**[优化项1]**: [具体建议]
**[优化项2]**: [具体建议]

---

## 📝 文档更新记录

| 日期 | 更新内容 | 更新人 |
|------|----------|--------|
| [YYYY-MM-DD] | 初始文档创建 | Cursor AI |
| [YYYY-MM-DD] | [具体更新内容] | Cursor AI |

---

## 🔗 相关资源

- **Linear Issue**: [链接或ID]
- **相关文档**: [链接列表]
- **测试报告**: [链接]
- **部署记录**: [链接]
    id: string;
    // ...
  };

## 6. 后续优化建议